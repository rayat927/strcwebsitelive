{"ast":null,"code":"import _classCallCheck from \"F:/strc/website/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"F:/strc/website/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport firebase from '@firebase/app-compat';\nimport { _getChild, uploadBytesResumable, StringFormat, _dataFromString, _UploadTask, _FbsBlob, listAll as _listAll, list as _list, getMetadata as _getMetadata, updateMetadata as _updateMetadata, getDownloadURL as _getDownloadURL, deleteObject, _invalidRootOperation, _invalidArgument, ref as _ref2, _Location, connectStorageEmulator, _TaskState, _TaskEvent } from '@firebase/storage';\nimport { Component } from '@firebase/component';\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nvar UploadTaskSnapshotCompat = /*#__PURE__*/function () {\n  function UploadTaskSnapshotCompat(_delegate, task, ref) {\n    _classCallCheck(this, UploadTaskSnapshotCompat);\n\n    this._delegate = _delegate;\n    this.task = task;\n    this.ref = ref;\n  }\n\n  _createClass(UploadTaskSnapshotCompat, [{\n    key: \"bytesTransferred\",\n    get: function get() {\n      return this._delegate.bytesTransferred;\n    }\n  }, {\n    key: \"metadata\",\n    get: function get() {\n      return this._delegate.metadata;\n    }\n  }, {\n    key: \"state\",\n    get: function get() {\n      return this._delegate.state;\n    }\n  }, {\n    key: \"totalBytes\",\n    get: function get() {\n      return this._delegate.totalBytes;\n    }\n  }]);\n\n  return UploadTaskSnapshotCompat;\n}();\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar UploadTaskCompat = /*#__PURE__*/function () {\n  function UploadTaskCompat(_delegate, _ref) {\n    _classCallCheck(this, UploadTaskCompat);\n\n    this._delegate = _delegate;\n    this._ref = _ref;\n    this.cancel = this._delegate.cancel.bind(this._delegate);\n    this.catch = this._delegate.catch.bind(this._delegate);\n    this.pause = this._delegate.pause.bind(this._delegate);\n    this.resume = this._delegate.resume.bind(this._delegate);\n  }\n\n  _createClass(UploadTaskCompat, [{\n    key: \"snapshot\",\n    get: function get() {\n      return new UploadTaskSnapshotCompat(this._delegate.snapshot, this, this._ref);\n    }\n  }, {\n    key: \"then\",\n    value: function then(onFulfilled, onRejected) {\n      var _this = this;\n\n      return this._delegate.then(function (snapshot) {\n        if (onFulfilled) {\n          return onFulfilled(new UploadTaskSnapshotCompat(snapshot, _this, _this._ref));\n        }\n      }, onRejected);\n    }\n  }, {\n    key: \"on\",\n    value: function on(type, nextOrObserver, error, completed) {\n      var _this2 = this;\n\n      var wrappedNextOrObserver = undefined;\n\n      if (!!nextOrObserver) {\n        if (typeof nextOrObserver === 'function') {\n          wrappedNextOrObserver = function wrappedNextOrObserver(taskSnapshot) {\n            return nextOrObserver(new UploadTaskSnapshotCompat(taskSnapshot, _this2, _this2._ref));\n          };\n        } else {\n          wrappedNextOrObserver = {\n            next: !!nextOrObserver.next ? function (taskSnapshot) {\n              return nextOrObserver.next(new UploadTaskSnapshotCompat(taskSnapshot, _this2, _this2._ref));\n            } : undefined,\n            complete: nextOrObserver.complete || undefined,\n            error: nextOrObserver.error || undefined\n          };\n        }\n      }\n\n      return this._delegate.on(type, wrappedNextOrObserver, error || undefined, completed || undefined);\n    }\n  }]);\n\n  return UploadTaskCompat;\n}();\n\nvar ListResultCompat = /*#__PURE__*/function () {\n  function ListResultCompat(_delegate, _service) {\n    _classCallCheck(this, ListResultCompat);\n\n    this._delegate = _delegate;\n    this._service = _service;\n  }\n\n  _createClass(ListResultCompat, [{\n    key: \"prefixes\",\n    get: function get() {\n      var _this3 = this;\n\n      return this._delegate.prefixes.map(function (ref) {\n        return new ReferenceCompat(ref, _this3._service);\n      });\n    }\n  }, {\n    key: \"items\",\n    get: function get() {\n      var _this4 = this;\n\n      return this._delegate.items.map(function (ref) {\n        return new ReferenceCompat(ref, _this4._service);\n      });\n    }\n  }, {\n    key: \"nextPageToken\",\n    get: function get() {\n      return this._delegate.nextPageToken || null;\n    }\n  }]);\n\n  return ListResultCompat;\n}();\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *  http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar ReferenceCompat = /*#__PURE__*/function () {\n  function ReferenceCompat(_delegate, storage) {\n    _classCallCheck(this, ReferenceCompat);\n\n    this._delegate = _delegate;\n    this.storage = storage;\n  }\n\n  _createClass(ReferenceCompat, [{\n    key: \"name\",\n    get: function get() {\n      return this._delegate.name;\n    }\n  }, {\n    key: \"bucket\",\n    get: function get() {\n      return this._delegate.bucket;\n    }\n  }, {\n    key: \"fullPath\",\n    get: function get() {\n      return this._delegate.fullPath;\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return this._delegate.toString();\n    }\n    /**\r\n     * @returns A reference to the object obtained by\r\n     * appending childPath, removing any duplicate, beginning, or trailing\r\n     * slashes.\r\n     */\n\n  }, {\n    key: \"child\",\n    value: function child(childPath) {\n      var reference = _getChild(this._delegate, childPath);\n\n      return new ReferenceCompat(reference, this.storage);\n    }\n  }, {\n    key: \"root\",\n    get: function get() {\n      return new ReferenceCompat(this._delegate.root, this.storage);\n    }\n    /**\r\n     * @returns A reference to the parent of the\r\n     * current object, or null if the current object is the root.\r\n     */\n\n  }, {\n    key: \"parent\",\n    get: function get() {\n      var reference = this._delegate.parent;\n\n      if (reference == null) {\n        return null;\n      }\n\n      return new ReferenceCompat(reference, this.storage);\n    }\n    /**\r\n     * Uploads a blob to this object's location.\r\n     * @param data - The blob to upload.\r\n     * @returns An UploadTask that lets you control and\r\n     * observe the upload.\r\n     */\n\n  }, {\n    key: \"put\",\n    value: function put(data, metadata) {\n      this._throwIfRoot('put');\n\n      return new UploadTaskCompat(uploadBytesResumable(this._delegate, data, metadata), this);\n    }\n    /**\r\n     * Uploads a string to this object's location.\r\n     * @param value - The string to upload.\r\n     * @param format - The format of the string to upload.\r\n     * @returns An UploadTask that lets you control and\r\n     * observe the upload.\r\n     */\n\n  }, {\n    key: \"putString\",\n    value: function putString(value) {\n      var format = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : StringFormat.RAW;\n      var metadata = arguments.length > 2 ? arguments[2] : undefined;\n\n      this._throwIfRoot('putString');\n\n      var data = _dataFromString(format, value);\n\n      var metadataClone = Object.assign({}, metadata);\n\n      if (metadataClone['contentType'] == null && data.contentType != null) {\n        metadataClone['contentType'] = data.contentType;\n      }\n\n      return new UploadTaskCompat(new _UploadTask(this._delegate, new _FbsBlob(data.data, true), metadataClone), this);\n    }\n    /**\r\n     * List all items (files) and prefixes (folders) under this storage reference.\r\n     *\r\n     * This is a helper method for calling list() repeatedly until there are\r\n     * no more results. The default pagination size is 1000.\r\n     *\r\n     * Note: The results may not be consistent if objects are changed while this\r\n     * operation is running.\r\n     *\r\n     * Warning: listAll may potentially consume too many resources if there are\r\n     * too many results.\r\n     *\r\n     * @returns A Promise that resolves with all the items and prefixes under\r\n     *  the current storage reference. `prefixes` contains references to\r\n     *  sub-directories and `items` contains references to objects in this\r\n     *  folder. `nextPageToken` is never returned.\r\n     */\n\n  }, {\n    key: \"listAll\",\n    value: function listAll() {\n      var _this5 = this;\n\n      return _listAll(this._delegate).then(function (r) {\n        return new ListResultCompat(r, _this5.storage);\n      });\n    }\n    /**\r\n     * List items (files) and prefixes (folders) under this storage reference.\r\n     *\r\n     * List API is only available for Firebase Rules Version 2.\r\n     *\r\n     * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'\r\n     * delimited folder structure. Refer to GCS's List API if you want to learn more.\r\n     *\r\n     * To adhere to Firebase Rules's Semantics, Firebase Storage does not\r\n     * support objects whose paths end with \"/\" or contain two consecutive\r\n     * \"/\"s. Firebase Storage List API will filter these unsupported objects.\r\n     * list() may fail if there are too many unsupported objects in the bucket.\r\n     *\r\n     * @param options - See ListOptions for details.\r\n     * @returns A Promise that resolves with the items and prefixes.\r\n     * `prefixes` contains references to sub-folders and `items`\r\n     * contains references to objects in this folder. `nextPageToken`\r\n     * can be used to get the rest of the results.\r\n     */\n\n  }, {\n    key: \"list\",\n    value: function list(options) {\n      var _this6 = this;\n\n      return _list(this._delegate, options || undefined).then(function (r) {\n        return new ListResultCompat(r, _this6.storage);\n      });\n    }\n    /**\r\n     * A `Promise` that resolves with the metadata for this object. If this\r\n     * object doesn't exist or metadata cannot be retreived, the promise is\r\n     * rejected.\r\n     */\n\n  }, {\n    key: \"getMetadata\",\n    value: function getMetadata() {\n      return _getMetadata(this._delegate);\n    }\n    /**\r\n     * Updates the metadata for this object.\r\n     * @param metadata - The new metadata for the object.\r\n     * Only values that have been explicitly set will be changed. Explicitly\r\n     * setting a value to null will remove the metadata.\r\n     * @returns A `Promise` that resolves\r\n     * with the new metadata for this object.\r\n     * @see firebaseStorage.Reference.prototype.getMetadata\r\n     */\n\n  }, {\n    key: \"updateMetadata\",\n    value: function updateMetadata(metadata) {\n      return _updateMetadata(this._delegate, metadata);\n    }\n    /**\r\n     * @returns A `Promise` that resolves with the download\r\n     * URL for this object.\r\n     */\n\n  }, {\n    key: \"getDownloadURL\",\n    value: function getDownloadURL() {\n      return _getDownloadURL(this._delegate);\n    }\n    /**\r\n     * Deletes the object at this location.\r\n     * @returns A `Promise` that resolves if the deletion succeeds.\r\n     */\n\n  }, {\n    key: \"delete\",\n    value: function _delete() {\n      this._throwIfRoot('delete');\n\n      return deleteObject(this._delegate);\n    }\n  }, {\n    key: \"_throwIfRoot\",\n    value: function _throwIfRoot(name) {\n      if (this._delegate._location.path === '') {\n        throw _invalidRootOperation(name);\n      }\n    }\n  }]);\n\n  return ReferenceCompat;\n}();\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * A service that provides firebaseStorage.Reference instances.\r\n * @param opt_url gs:// url to a custom Storage Bucket\r\n */\n\n\nvar StorageServiceCompat = /*#__PURE__*/function () {\n  function StorageServiceCompat(app, _delegate) {\n    _classCallCheck(this, StorageServiceCompat);\n\n    this.app = app;\n    this._delegate = _delegate;\n  }\n\n  _createClass(StorageServiceCompat, [{\n    key: \"maxOperationRetryTime\",\n    get: function get() {\n      return this._delegate.maxOperationRetryTime;\n    }\n  }, {\n    key: \"maxUploadRetryTime\",\n    get: function get() {\n      return this._delegate.maxUploadRetryTime;\n    }\n    /**\r\n     * Returns a firebaseStorage.Reference for the given path in the default\r\n     * bucket.\r\n     */\n\n  }, {\n    key: \"ref\",\n    value: function ref(path) {\n      if (isUrl(path)) {\n        throw _invalidArgument('ref() expected a child path but got a URL, use refFromURL instead.');\n      }\n\n      return new ReferenceCompat(_ref2(this._delegate, path), this);\n    }\n    /**\r\n     * Returns a firebaseStorage.Reference object for the given absolute URL,\r\n     * which must be a gs:// or http[s]:// URL.\r\n     */\n\n  }, {\n    key: \"refFromURL\",\n    value: function refFromURL(url) {\n      if (!isUrl(url)) {\n        throw _invalidArgument('refFromURL() expected a full URL but got a child path, use ref() instead.');\n      }\n\n      try {\n        _Location.makeFromUrl(url, this._delegate.host);\n      } catch (e) {\n        throw _invalidArgument('refFromUrl() expected a valid full URL but got an invalid one.');\n      }\n\n      return new ReferenceCompat(_ref2(this._delegate, url), this);\n    }\n  }, {\n    key: \"setMaxUploadRetryTime\",\n    value: function setMaxUploadRetryTime(time) {\n      this._delegate.maxUploadRetryTime = time;\n    }\n  }, {\n    key: \"setMaxOperationRetryTime\",\n    value: function setMaxOperationRetryTime(time) {\n      this._delegate.maxOperationRetryTime = time;\n    }\n  }, {\n    key: \"useEmulator\",\n    value: function useEmulator(host, port) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      connectStorageEmulator(this._delegate, host, port, options);\n    }\n  }]);\n\n  return StorageServiceCompat;\n}();\n\nfunction isUrl(path) {\n  return /^[A-Za-z]+:\\/\\//.test(path);\n}\n\nvar name = \"@firebase/storage-compat\";\nvar version = \"0.1.10\";\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Type constant for Firebase Storage.\r\n */\n\nvar STORAGE_TYPE = 'storage-compat';\n\nfunction factory(container, _ref3) {\n  var url = _ref3.instanceIdentifier;\n  // Dependencies\n  var app = container.getProvider('app-compat').getImmediate();\n  var storageExp = container.getProvider('storage').getImmediate({\n    identifier: url\n  });\n  var storageServiceCompat = new StorageServiceCompat(app, storageExp);\n  return storageServiceCompat;\n}\n\nfunction registerStorage(instance) {\n  var namespaceExports = {\n    // no-inline\n    TaskState: _TaskState,\n    TaskEvent: _TaskEvent,\n    StringFormat: StringFormat,\n    Storage: StorageServiceCompat,\n    Reference: ReferenceCompat\n  };\n  instance.INTERNAL.registerComponent(new Component(STORAGE_TYPE, factory, \"PUBLIC\"\n  /* PUBLIC */\n  ).setServiceProps(namespaceExports).setMultipleInstances(true));\n  instance.registerVersion(name, version);\n}\n\nregisterStorage(firebase);\nexport { registerStorage };","map":{"version":3,"mappings":"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","names":["UploadTaskSnapshotCompat","_delegate","task","ref","bytesTransferred","metadata","state","totalBytes","UploadTaskCompat","_ref","cancel","bind","catch","pause","resume","snapshot","onFulfilled","onRejected","then","type","nextOrObserver","error","completed","wrappedNextOrObserver","undefined","taskSnapshot","next","complete","on","ListResultCompat","_service","prefixes","map","ReferenceCompat","items","nextPageToken","storage","name","bucket","fullPath","toString","childPath","reference","_getChild","root","parent","data","_throwIfRoot","uploadBytesResumable","value","format","StringFormat","RAW","_dataFromString","metadataClone","contentType","_UploadTask","_FbsBlob","listAll","r","options","list","getMetadata","updateMetadata","getDownloadURL","deleteObject","_location","path","_invalidRootOperation","StorageServiceCompat","app","maxOperationRetryTime","maxUploadRetryTime","isUrl","_invalidArgument","url","_Location","makeFromUrl","host","e","time","port","connectStorageEmulator","test","STORAGE_TYPE","factory","container","instanceIdentifier","getProvider","getImmediate","storageExp","identifier","storageServiceCompat","registerStorage","instance","namespaceExports","TaskState","TaskEvent","Storage","Reference","INTERNAL","registerComponent","Component","setServiceProps","setMultipleInstances","registerVersion","version","firebase"],"sources":["."],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport firebase from '@firebase/app-compat';\nimport { _FirebaseNamespace } from '@firebase/app-types/private';\nimport {\n  StringFormat,\n  _TaskEvent as TaskEvent,\n  _TaskState as TaskState\n} from '@firebase/storage';\n\nimport { ReferenceCompat } from './reference';\nimport { StorageServiceCompat } from './service';\nimport * as types from '@firebase/storage-types';\nimport {\n  Component,\n  ComponentType,\n  ComponentContainer,\n  InstanceFactoryOptions\n} from '@firebase/component';\n\nimport { name, version } from '../package.json';\n\n/**\n * Type constant for Firebase Storage.\n */\nconst STORAGE_TYPE = 'storage-compat';\n\nfunction factory(\n  container: ComponentContainer,\n  { instanceIdentifier: url }: InstanceFactoryOptions\n): types.FirebaseStorage {\n  // Dependencies\n  const app = container.getProvider('app-compat').getImmediate();\n  const storageExp = container\n    .getProvider('storage')\n    .getImmediate({ identifier: url });\n\n  const storageServiceCompat: StorageServiceCompat = new StorageServiceCompat(\n    app,\n    storageExp\n  );\n  return storageServiceCompat;\n}\n\nexport function registerStorage(instance: _FirebaseNamespace): void {\n  const namespaceExports = {\n    // no-inline\n    TaskState,\n    TaskEvent,\n    StringFormat,\n    Storage: StorageServiceCompat,\n    Reference: ReferenceCompat\n  };\n  instance.INTERNAL.registerComponent(\n    new Component(STORAGE_TYPE, factory, ComponentType.PUBLIC)\n      .setServiceProps(namespaceExports)\n      .setMultipleInstances(true)\n  );\n\n  instance.registerVersion(name, version);\n}\n\nregisterStorage(firebase as unknown as _FirebaseNamespace);\n\n/**\n * Define extension behavior for `registerStorage`\n */\ndeclare module '@firebase/app-compat' {\n  interface FirebaseNamespace {\n    storage?: {\n      (app?: FirebaseApp, url?: string): types.FirebaseStorage;\n      Storage: typeof types.FirebaseStorage;\n\n      StringFormat: {\n        BASE64: types.StringFormat;\n        BASE64URL: types.StringFormat;\n        DATA_URL: types.StringFormat;\n        RAW: types.StringFormat;\n      };\n      TaskEvent: {\n        STATE_CHANGED: types.TaskEvent;\n      };\n      TaskState: {\n        CANCELED: types.TaskState;\n        ERROR: types.TaskState;\n        PAUSED: types.TaskState;\n        RUNNING: types.TaskState;\n        SUCCESS: types.TaskState;\n      };\n    };\n  }\n  interface FirebaseApp {\n    storage?(storageBucket?: string): types.FirebaseStorage;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}